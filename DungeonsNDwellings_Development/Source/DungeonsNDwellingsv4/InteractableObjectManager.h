// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "InteractableObject.h"
#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "InteractableObjectManager.generated.h"

UCLASS()
class DUNGEONSNDWELLINGSV4_API AInteractableObjectManager : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AInteractableObjectManager();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;



private:
	/****************************************************************************PRIVATE VARIABLES**************************************************************************/

	//Variables to track player item relations//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float const minimumDistanceToInteract = 120;			//distance within which a player must be to interact
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to control the transform of interactable objects////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FVector objectSpawn = FVector(400, 400, 50);			//default spawn position
	FRotator const objectRotator = FRotator(0, 0, 0);		//default rotation
	FVector const objectScale = FVector(1, 1, 1);			//default scale
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Array to hold all interactable objects in scene///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		TArray<AInteractableObject*> interactableObjectArray;	//array of all interactable objects
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Track how many interactable objects have currently been spawned - max 2///////////////////////////////////////////////////////////////////////////////////////////////
	int itemSpawnedCounter;					//how many interactables there are
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variable to track distance between player and interactable////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float distance;					//distance from player
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Variables from external classes - GET and SETs////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	int roomCount;						//number of rooms
	FVector roomPlacementModifier;		//distance between rooms
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



public:
	/*******************************************************************************PUBLIC FUNCTIONS************************************************************************/

	//Functions to control object spawning//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SpawnInteractableObject();				//spawn the object
	void SpawnInteractableOnComplete();			//spawns the second object
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to control player interactions with the item block//////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool CheckDistanceFromPlayer();				//gets player distance from object
	bool Reroll();								//player rerolls item attached to object
	void Claim();								//player takes item from object
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to GET and SET key variables from other classes/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void GetRoomCount();						//gets number of rooms
	void GetRoomPlacementModifier();			//get distance between rooms
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
