// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "ItemManager.generated.h"

UCLASS()
class DUNGEONSNDWELLINGSV4_API AItemManager : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AItemManager();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

private:

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////VARIABLES/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to hold world variables/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	int levelNumber;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Variables to control item tracking////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		int availableItemsCounter;		//counter of available items should be 1 or 2
	UPROPERTY(EditAnywhere)
		int itemValue;										//this will randomly generate a number and then associate it with the relevant item
	UPROPERTY(EditAnywhere)									//0 is no item for the sake of checking the currentAvailableArray
		TArray<FString> itemPool = { " ", "Strength-1", "Strength-2", "Strength-3", "Vigor-1", "Vigor-2", "Vigor-3", "Masses-1", "Masses-2", "Masses-3", "Sacrifice-1", "Fire Rate-1", "Growth-1", "Slowmo-1", "Hypermode-1", "Money Shot-1" }; 
	UPROPERTY(EditAnywhere)
		TArray<FString> currentAvailableItems; // array of currently available items
	UPROPERTY(EditAnywhere)
		TArray<FString> playerItems;			//array of players items

	UPROPERTY(EditAnywhere)
		TArray<FString> uniqueClasses;  //array to track each unique group collected
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to count number of each item we have///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		int strItemCounter;				//counters for each item type
	UPROPERTY(EditAnywhere)
		int massItemCounter;
	UPROPERTY(EditAnywhere)
		int vigItemCounter;
	UPROPERTY(EditAnywhere)
		int sacItemCounter;
	UPROPERTY(EditAnywhere)
		int rateItemCounter;
	UPROPERTY(EditAnywhere)
		int growthItemCounter;
	UPROPERTY(EditAnywhere)
		int slowItemCounter;
	UPROPERTY(EditAnywhere)
		int hyperItemCounter;
	UPROPERTY(EditAnywhere)
		int moneyShotItemCounter;


	UPROPERTY(EditAnywhere)
		bool isStrMaxed;			//booleans to track maxed groups
	UPROPERTY(EditAnywhere)
		bool isMassMaxed;
	UPROPERTY(EditAnywhere)
		bool isVigMaxed;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to control player stat changes in general//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool isABuff;									//generally determines a buff from non-buff

	//str buff items
	float damageMultiplier;	

	//mass buff items
	int spawnerModifier;

	//health buff items
	float healthIncrease;
	bool isHealthRegening = false;
	float regenRate;								//amount per room

	//sac buff items
	float healthToRecieve;
	int chanceToRecieve;

	//rate buff items
	float fireRate;

	//variables for growth item
	float initialSpeed;
	float maxSpeed;
	float lifeSpan;
	bool isGrowing;
	FVector scale;

	//variables for slow item
	float speedReductionPercent;

	//variables for hypermode
	float percentDamageIncrease;

	//variables for moneyshot
	float dropChanceIncrease;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to control player recieving debuffs////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		TArray<bool> activeDebuffs;		//boolean of activated debuffs
	TArray<bool>appliedDebuffs;			//boolean of applied debuffs
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	


	/****************************************************************************************************FUNCTIONS****************************************************************************************************************************/

public:

	//Functions to control and manage item selection and collection////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SelectItem(FString objectName);			//pick an item
	void RerollItem(FString objectName);			//re-roll a selected itme
	void AddItemToPlayer(FString objectName);		//player gets the item
	UFUNCTION(BlueprintPure, Category = "Item Widget")
		TArray<FString> GetCurrentItems();			//track the names and display them at right time
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to control and apply affects to players based off of item selection////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void TrackAffects();							//track affects being applied to player
	void UpdateUniqueArray(FString itemString);		//track unique items
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for each family of affects, keep other two functions clean/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void StrAffects();								//apply affects to player
	void MassesAffects();
	void VigAffects();
	void SacAffects();
	void RateAffects();
	void GrowthAffects();
	void SlowAffects();
	void HyperAffects();
	void MoneyShotAffects();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for debuffs and negative affects///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void DebuffAffects();				//apply debuffs to player
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for GETTING and SETTING////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool IsStrBuffMaxed();				//tell player a buff is maxed
	bool IsMassBuffMaxed();
	bool IsVigBuffMaxed();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for getting world values///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void GetLevelNumber();				//finds which level the player is on
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//New level transition function////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void TransitionToNewLevel();		//function for modifying values before new level is started
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for GET and SET key values/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetGameInstanceVariables();		//update values on game instance
	void GetItemStatsFromGI();				//get values from game instance
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
