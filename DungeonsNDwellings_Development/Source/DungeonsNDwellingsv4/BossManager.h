// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "BossManager.generated.h"

UCLASS()
class DUNGEONSNDWELLINGSV4_API ABossManager : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	ABossManager();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

private:
	/****************************************************************************PRIVATE VARIABLES***************************************************************************/

	//Projectile Boss Spawn Point////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FVector spawnLocation = FVector(400, 400, 0);											//current hard coded spawn variables
	FVector const bossOffset = FVector(0, 0, 32);											//will have to change when more bosses are added
	FRotator const spawnRotation = FRotator(0, 0, 0);
	FVector const spawnScale = FVector(1.3, 1.3, 0.6);
	FTransform spawnTrans = FTransform(spawnRotation, spawnLocation, spawnScale);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables from GET and SETs These values will be constant across all classes///////////////////////////////////////////////////////////////////////////////////////////
	float playerOffset;								//player distance off ground
	float roomPlacementModifier;					//distance between rooms
	int roomCount;									//number of rooms
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Constant Z Offset for this boss////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float const projectileBossOffset = 32;			//distance off ground for the current boss - needs changing in future
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to manage boss items and the relevant attached features//////////////////////////////////////////////////////////////////////////////////////////////////////
	bool isBossKilled;								//checks if boss is dead
	float currentBossDmg;							//holds damage for current active boss
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



public:	
	/**************************************************************************PUBLIC FUNCTIONS*****************************************************************************/

	//Functions to retrieve key variables from other classes go here////////////////////////////////////////////////////////////////////////////////////////////////////////
	void GetRoomPlacementModifier();				//gets distance between rooms										 
	void GetPlayerZOffset();						//gets player distance of ground					 
	void GetRoomCount();							//gets number of rooms
	float GetZOffset();								//nothing?
	float GetCurrentBossDmg();						//gets current damage to deal - designed with more boss development in mind
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Boss behaviour and gameplay functions go here/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ActivateBoss(FVector playerLoc);			//activate boss - turn on
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to manipulate external features and gameplay mechanics based on boss interaction////////////////////////////////////////////////////////////////////////////
	void SetIsBossKilled();							//set when boss dies
	void AddLevelCompleteElements();				//trigger end level effects
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
