// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "ProjectileBoss.generated.h"

UCLASS()
class DUNGEONSNDWELLINGSV4_API AProjectileBoss : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AProjectileBoss();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

private:
	/***************************************************************************PRIVATE VARIABLES*************************************************************************/

	//Default positional properties for this boss/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FRotator const rot = FRotator(0, 0, 0);					//default rotation
	FVector const sca = FVector(1.05, 1.05, 0.4);			//default scale
	FVector loc = FVector(400, 400, 0);						//spawn point - without room position
	FVector gunOffset;										//projectile spawn point offset
	float const projBossZOffset = 32;						//distance boss is off of the ground
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to hold the stats for the projectile boss/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float projectileBossContactDamage;				//dmg for contact
	float projectileBossHealth;						//health
	float projectileBossDmg;						//damage
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variable to hold properties for boss behaviour functionality////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool isBossActive;			//is boss on
	TArray<FString> bossAttacks = { "straight", "circular", "pulsating" };	//current attack list
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Timers//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FTimerHandle attackTimerHandle;				//handle for attacks 1, 2, 3
	FTimerHandle attackTimerHandle_Two;			//handle for attack 3.1
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to hold negative effects and damage values VS boss////////////////////////////////////////////////////////////////////////////////////////////////////////
	float playerDmg;																	//variable to temporarily hold how much damage the boss is about to take
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to hold external class variables//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FVector playerLocation;			//players location
	int roomCount;					//number of rooms
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = InteractableObject, meta = (AllowPrivateAccess = "true"))
		UStaticMeshComponent* ProjectileBossComponent;

	/** Function to handle the enemy hitting something */
	UFUNCTION()
		void OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);

	/*****************************************************************************PUBLIC FUNCTIONS************************************************************************/
	
	//Functions to control boss behaviours////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetIsBossActive();					//turn boss on
	void SelectBossAttack();				//pick which attack boss will use
	UFUNCTION()
		void StraightAttack(float timeToEnd);	//perform straight attack
	UFUNCTION()
		void CircularAttack(float timeToEnd);	//perfrom circular attack
	UFUNCTION()
		void PulsatingAttack_One(float timeToEnd);	//pulse 1 of pulsating attack
	UFUNCTION()
		void PulsatingAttack_Two(float timeToEnd);	//pulse 2 of pulsating attack
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to control dealing damage and applying effects to a boss//////////////////////////////////////////////////////////////////////////////////////////////////
	void BossTakeDamage(float dmg);			//boss takes damage
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to GET and SET key variables from external classes////////////////////////////////////////////////////////////////////////////////////////////////////////
	void GetRoomCount();					//get number of rooms
	float GetBossProjectileDmg();			//pass the damage boss projectiles deal
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
