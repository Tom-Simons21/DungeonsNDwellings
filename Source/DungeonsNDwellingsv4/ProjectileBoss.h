// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "ProjectileBoss.generated.h"

UCLASS()
class DUNGEONSNDWELLINGSV4_API AProjectileBoss : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AProjectileBoss();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = InteractableObject, meta = (AllowPrivateAccess = "true"))
		UStaticMeshComponent* ProjectileBossComponent;

	/** Function to handle the enemy hitting something */
	UFUNCTION()
		void OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);


	/****************************************************************************PUBLIC VARIABLES***************************************************************************/

	//Default positional properties for this boss/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FRotator const rot = FRotator(0, 0, 0);																																//
	FVector const sca = FVector(1.05, 1.05, 0.4);																														//
	FVector loc = FVector(400, 400, 0);																																	//
	float const zLoc = 32;		
	
	UPROPERTY(Category = Gameplay, EditAnywhere, BlueprintReadWrite)
		FVector gunOffset;																																				//
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Variables to hold the stats for the projectile boss/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float projectileBossContactDamage;
	float projectileBossHealth;
	float projectileBossDmg;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Variable to hold properties for boss behaviour functionality////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		bool isBossActive;
	UPROPERTY(EditAnywhere)
		TArray<FString> bossAttacks = { "straight", "circular", "pulsating" };

	FTimerHandle attackTimerHandle;
	FTimerHandle attackTimerHandle_Two;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	
	//Variables to hold negative effects and damage values VS boss////////////////////////////////////////////////////////////////////////////////////////////////////////
	float playerDmg;																	//variable to temporarily hold how much damage the boss is about to take
	float zOffset;
	int roomCount;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Variables to hold external class variables//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FVector playerLocation;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




	/*****************************************************************************PUBLIC FUNCTIONS***************************************************************************/
	
	//Functions to control boss behaviours////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetIsBossActive();
	void SelectBossAttack();
	UFUNCTION()
		void StraightAttack(float timeToEnd);
	UFUNCTION()
		void CircularAttack(float timeToEnd);
	UFUNCTION()
		void PulsatingAttack_One(float timeToEnd);
	UFUNCTION()
		void PulsatingAttack_Two(float timeToEnd);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Functions to control dealing damage and applying effects to a boss//////////////////////////////////////////////////////////////////////////////////////////////////
	void BossTakeDamage(float dmg);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Functions to GET and SET key variables from external classes////////////////////////////////////////////////////////////////////////////////////////////////////////
	void GetSelfZOffset();
	void GetRoomCount();
	float GetBossProjectileDmg();
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
