// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "DungeonsNDwellingsv4Pawn.generated.h"

UCLASS(Blueprintable)
class ADungeonsNDwellingsv4Pawn : public APawn
{
	GENERATED_BODY()

	/* The mesh component */
	UPROPERTY(Category = Mesh, VisibleDefaultsOnly, BlueprintReadOnly, meta = (AllowPrivateAccess = "true"))
		class UStaticMeshComponent* PlayerMeshComponent;

	/** The camera */
	UPROPERTY(Category = Camera, VisibleAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = "true"))
		class UCameraComponent* CameraComponent;

	/** Camera boom positioning the camera above the character */
	UPROPERTY(Category = Camera, VisibleAnywhere, BlueprintReadOnly, meta = (AllowPrivateAccess = "true"))
		class USpringArmComponent* CameraBoom;

public:
	ADungeonsNDwellingsv4Pawn();

	/** Offset from the ships location to spawn projectiles */
	UPROPERTY(Category = Gameplay, EditAnywhere, BlueprintReadWrite)
		FVector GunOffset;

	/* How fast the weapon will fire */
	UPROPERTY(Category = Gameplay, EditAnywhere, BlueprintReadWrite)
		float FireRate;

	/* The speed our ship moves around the level */
	UPROPERTY(Category = Gameplay, EditAnywhere, BlueprintReadWrite)
		float MoveSpeed;

	/** Sound to play each time we fire */
	UPROPERTY(Category = Audio, EditAnywhere, BlueprintReadWrite)
		class USoundBase* FireSound;

	// Begin Actor Interface
	virtual void Tick(float DeltaSeconds) override;
	virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
	// End Actor Interface

	/* Fire a shot in the specified direction */
	void FireShot(FVector FireDirection);

	/* Handler for the fire timer expiry */
	void ShotTimerExpired();

	void BeginPlay();

	// Static names for axis bindings
	static const FName MoveForwardBinding;
	static const FName MoveRightBinding;
	static const FName FireForwardBinding;
	static const FName FireRightBinding;

private:

	/* Flag to control firing  */
	uint32 bCanFire : 1;

	/** Handle for efficient management of ShotTimerExpired timer */
	FTimerHandle TimerHandle_ShotTimerExpired;

	/**********************************************************************PRIVATE VARIABLES*******************************************************************************/

	//Player Stats/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		bool isDamageable;
	UPROPERTY(EditAnywhere)
		float playerHealth;
	UPROPERTY(EditAnywhere)
		float playerHealthDefault;
	UPROPERTY(EditAnyWhere)
		float playerMaxHealth;
	UPROPERTY(EditAnywhere)
		int playerGold;
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Projectile Stats////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		float initialSpeed;
	UPROPERTY(EditAnywhere)
		float maxSpeed;
	UPROPERTY(EditAnywhere)
		float lifeSpan;
	UPROPERTY(EditAnywhere)
		bool isGrowing;
	UPROPERTY(EditAnywhere)
		FVector projectileScale;
	//Local projectile modifiers/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		float projectileDamage;
	UPROPERTY(EditAnywhere)
		float projectileDefaultDamage;
	bool isSpawningSecondShot;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Currency variables/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	int goldToAdd;
	int winStreak;
	int loseStreak;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Key vector locations///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FVector playerZElevation;
	FVector roomPlacementModifier;
	TArray<float> uniqueZTracker = { 0 };
	FVector playerStartPoint = FVector(175, 400, 22);
	FVector playerScale = FVector(0.4, 0.4, 0.4);
	FVector exitPoint;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Timers/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FTimerHandle hitControlTimer;   //resets the players "damageable" stat every x seconds - provides temp invulnerability on hit
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Pause Menu/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool isPaused;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Door Modifier + Tracker Variables used for player move algorithms//////////////////////////////////////////////////////////////////////////////////////////////////
	TArray<FVector> doorMapping;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables for player stats activation//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool strBuffActive;
	bool massBuffActive;
	bool vigBuffActive;
	bool sacBuffActive;
	bool rateBuffActive;
	bool growthBuffActive;
	bool slowBuffActive;
	bool hyperBuffActive;
	bool mnyShotBuffActive;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Player stats provided only via items///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		float healthFromKills;
	UPROPERTY(EditAnywhere)
		int chanceToRecieveHealth;
	UPROPERTY(EditAnywhere)
		int spawnChanceValue;
	UPROPERTY(EditAnywhere)
		float healthRegenValue;
	UPROPERTY(EditAnywhere)
		float enemySpeedReductionPercent;
	UPROPERTY(EditAnywhere)
		float otherDmgChanges;
	UPROPERTY(EditAnywhere)
		float hyperModePercent;
	UPROPERTY(EditAnywhere)
		float moneyDropModifier;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables for world stats//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	FString const levelPrefix = "DwellingsMap-";
	int levelNumber;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Variables from external classes////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	int roomCount;
	bool isLevelComplete;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public:
	/** Returns PlayerMeshComponent subobject **/
	FORCEINLINE class UStaticMeshComponent* GetShipMeshComponent() const { return PlayerMeshComponent; }
	/** Returns CameraComponent subobject **/
	FORCEINLINE class UCameraComponent* GetCameraComponent() const { return CameraComponent; }
	/** Returns CameraBoom subobject **/
	FORCEINLINE class USpringArmComponent* GetCameraBoom() const { return CameraBoom; }


	/*************************************************************************PUBLIC FUNCTIONS***************************************************************************/

	//Functions for updating variables relative to projectile////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void UpdateProjectileValues(float initSpeed, float maxSpeed, float life, bool isGrowing, FVector scale);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for controlling player damage taken//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void MakeDamageable();
	void ApplyInvulnerability(bool isDamageable);
	void PlayerTakeDamage(float damageToTake);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for tracking player movement through level and current location//////////////////////////////////////////////////////////////////////////////////////////
	void CalcPlayerLocation();										//passes player location to other objects
	void CheckPlayerLocation();
	void SetLocationAdjustment(FVector doorLocation);
	void MoveToRoom(FVector newLocation);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to control player interactions and additional actions////////////////////////////////////////////////////////////////////////////////////////////////////
	void OnInteract();
	void OnReroll();
	void OnPauseGame();
	void OnNextLevel();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to control player currency earning/spending/interest/////////////////////////////////////////////////////////////////////////////////////////////////////
	void UpdatePlayerCurrency();
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions to apply item affects to players/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetStrBuff();
	void SetMassBuff();
	void SetVigBuff();
	void SetSacBuff();
	void SetRateBuff();
	void SetGrowthBuff();
	void SetSlowBuff();
	void SetHyperBuff();
	void SetMnyShotBuff();

	void ModifyPlayerDamage(bool isABuff, float damageMultiplier);
	void ModifyProjectileSpawnChance(bool isABuff, int spawnChanceModifier);
	void ModifyPlayerHealth(bool isABuff, float healthIncrease, bool isHealthRegening, float healthRegenAmount);
	void ModifyPlayerKillBonuses(bool isABuff, float healthToRecieve, int chanceToRecieve);
	void ModifyPlayerFireRate(bool isABuff, float fireRate);
	void ModifyPlayerProjectileStyle(bool isABuff, float initSpeed, float topSpeed, float lifeTime, bool isGrow, FVector scale);
	void ModifyEnemyMoveSpeed(bool isABuff, float reductionPercent);
	void ModifyMoneyDropChance(bool isABuff, float dropChanceIncrease);
	void ModifyHyperModePercent(float hyperPercent);

	bool SpawnAdditionalShots(FVector FireDirection);
	void RegenHealth();
	void GainHealthOnKill();
	void ActivateHyperMode();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for world variables////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void GetLevelNumber();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for getting and passing key variables to other classes/////////////////////////////////////////////////////////////////////////////////////////////////
	FVector GetPlayersCurrentLocation();							//can be called by other objects to get player location
	void GetRoomPlacementModifier();
	FVector GetPlayerZOffset();
	float GetProjectileDamage();
	void GetRoomCount();
	float GetMoveSpeedModifier();
	void GetDoorMappings();
	void SetLevelComplete();
	void SetGameInstanceVariables();
	void GetPlayerStatsFromGI();

	UFUNCTION(BlueprintPure, Category = "PlayerHealth")
		float GetPlayerHealth();
	UFUNCTION(BlueprintPure, Category = "PlayerHealth")
		int GetPlayerCurrency();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};

