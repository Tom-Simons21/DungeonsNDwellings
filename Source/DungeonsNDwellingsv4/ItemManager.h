// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "ItemManager.generated.h"

UCLASS()
class DUNGEONSNDWELLINGSV4_API AItemManager : public AActor
{
	GENERATED_BODY()
	
public:	
	// Sets default values for this actor's properties
	AItemManager();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

private:

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////VARIABLES/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Variables to control item tracking////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		int availableItemsCounter;
	UPROPERTY(EditAnywhere)
		int itemValue;										//this will randomly generate a number and then associate it with the relevant item

	UPROPERTY(EditAnywhere)									//0 is no item for the sake of checking the currentAvailableArray;
		TArray<FString> itemPool = { "  ", "Strength-1", "Strength-2", "Strength-3", "Vigor-1", "Vigor-2", "Vigor-3", "Masses-1", "Masses-2", "Masses-3", "Sacrifice-1", "Fire Rate-1", "Growth-1", "Slowmo-1", "Hypermode-1", "Money Shot-1" }; 
	UPROPERTY(EditAnywhere)
		TArray<FString> currentAvailableItems;
	UPROPERTY(EditAnywhere)
		TArray<FString> playerItems;

	UPROPERTY(EditAnywhere)
		TArray<FString> uniqueClasses;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to count number of each item we have///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		int strItemCounter;
	UPROPERTY(EditAnywhere)
		int massItemCounter;
	UPROPERTY(EditAnywhere)
		int vigItemCounter;
	UPROPERTY(EditAnywhere)
		int sacItemCounter;
	UPROPERTY(EditAnywhere)
		int rateItemCounter;
	UPROPERTY(EditAnywhere)
		int growthItemCounter;
	UPROPERTY(EditAnywhere)
		int slowItemCounter;
	UPROPERTY(EditAnywhere)
		int hyperItemCounter;
	UPROPERTY(EditAnywhere)
		int moneyShotItemCounter;


	UPROPERTY(EditAnywhere)
		bool isStrMaxed;
	UPROPERTY(EditAnywhere)
		bool isMassMaxed;
	UPROPERTY(EditAnywhere)
		bool isVigMaxed;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to control player stat changes in general//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool isABuff;
	float damageMultiplier;
	int spawnerModifier;
	float healthIncrease;
	bool isHealthRegening = false;
	float regenRate;									//amount per room
	float healthToRecieve;
	int chanceToRecieve;
	float fireRate;

	//variables for growth item
	float initialSpeed;
	float maxSpeed;
	float lifeSpan;
	bool isGrowing;
	FVector scale;

	//variables for slow item
	float speedReductionPercent;

	//variables for hypermode
	float percentDamageIncrease;

	//variables for moneyshot
	float dropChanceIncrease;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Variables to control player recieving debuffs////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	UPROPERTY(EditAnywhere)
		TArray<bool> activeDebuffs;
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	


	/////////////////////////////////////////////////////////////////////////////////////////////////////FUNCTIONS/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public:

	//Functions to control and manage item selection and collection////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SelectItem(FString objectName);
	void RerollItem(FString objectName);
	void AddItemToPlayer(FString objectName);
	UFUNCTION(BlueprintPure, Category = "Item Widget")
		TArray<FString> GetCurrentItems();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Functions to control and apply affects to players based off of item selection////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void TrackAffects();
	void ApplyAffects();

	//Functions for each family of affects, keep other two functions clean/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**/void StrAffects();
	/**/void MassesAffects();
	/**/void VigAffects();
	/**/void SacAffects();
	/**/void RateAffects();
	/**/void GrowthAffects();
	/**/void SlowAffects();
	/**/void HyperAffects();
	/**/void MoneyShotAffects();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//Functions for debuffs and negative affects///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/**/void DebuffAffects();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//Functions for GETTING and SETTING////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool IsStrBuffMaxed();
	bool IsMassBuffMaxed();
	bool IsVigBuffMaxed();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
